### Easy Questions:

1. Retrieve all columns from the "film" table.
-> describe film;
-> show columns from film;

2. Select the distinct values of the "rating" column from the "film" table.
-> select distinct rating as Different_Rating from film;

3. Display the first 10 rows from the "actor" table.
-> select * from actor limit 10;

4. List all films with a rating of 'PG-13' from the "film" table.
->  select  * from film where rating = 'PG-13';

5. Count the number of films in the "film" table.
-> select count(film_id) as 'Total Number Of City' from film;

6. Show the titles of films released after the year 2005 from the "film" table.
-> select title as 'Film Name After 2005' from film where release_year > 2005;

7. Retrieve the names of customers who live in the city 'London' from the "customer" table.
-> select CONCAT(first_name,' ',last_name) as 'Customer From London' from customer where customer_id in (select id from customer_list where city = 'london');
-> select CONCAT(first_name,' ',last_name) as 'Customer From London' from customer inner join customer_list on customer.customer_id = customer_list.id where customer_list.city = 'london';

8. Display the rental details for film ID 5 from the "rental" table.
-> select * from rental where inventory_id in ( select inventory_id from inventory where film_id = 5 );

9. List all films where the title contains the word 'love' from the "film" table.
-> select title from film where title like '%love%';

10. Find the total number of actors in the "actor" table.
->  select count(actor_id) as 'Total No of Actor' from actor;

### Middle Questions:

11. Retrieve the names of customers who have rented more than five films from the "customer" and "rental" tables.
->  select concat(first_name, ' ', last_name) from customer where customer_id in ( select customer_id from rental group by customer_id having count(customer_id) > 5);

12. List the films that were rented on or after '2023-01-01' from the "rental" table.
->  select film.title from film inner join ( select rental.rental_date, inventory.film_id from rental inner join inventory on rental.inventory_id = inventory.inventory_id where rental.rental_date >= '2023-01-01' ) as rental_inventory on film.film_id = rental_inventory.film_id;

13. Display the average rental duration for each film from the "rental" table.
->  Confused about rental, film, and inventory table and there relations

14. Find the top 10 customers who have paid the most in total for rentals from the "payment" table.
->  select inr_tbl.customer_id as 'Customer_ID',concat(customer.first_name,' ',customer.last_name) as 'Customer Name',inr_tbl.paid_most as 'Paid Amount' from customer inner join (select customer_id, max(amount) as 'paid_most' from payment group by customer_id order by paid_most desc limit 10) as inr_tbl on customer.customer_id = inr_tbl.customer_id;

15. Show the films that have not been rented yet from the "film" and "rental" tables.
->  Confused about rental, film, and inventory table and there relations



Basic Stored Procedure Questions:
01. Create a stored procedure named GetFilmDetails that takes a film ID as input and returns details about that film.

->	delimiter //
		create procedure if not exists GetFilmDetails(IN id_film smallint unsigned)
		begin
			select * from film where film_id = id_film;
		end //
	delimiter;

	-- To use the above procedure, call the procedure as follows:
	-- Example:

	CALL GetFilmDetails(enter_film_id_here);


02. Write a stored procedure named GetCustomerRentals that accepts a customer ID as a parameter and displays all rentals for that customer.

->  	delimiter //
		create procedure if not exists GetCustomerRentals(IN id_customer smallint unsigned)
		begin
			select rental.* from customer inner join rental on customer.customer_id = rental.customer_id where customer.customer_id = id_customer;
		end //
	delimiter;

	-- To use the above procedure, call the procedure as follows:
	-- Example:

	CALL GetCustomerRentals(enter_customer_id_here);


03. Create a stored procedure named UpdateFilmTitle that updates the title of a film based on the film ID provided as an input parameter.

->    	delimiter //
		create procedure if not exists UpdateFilmTitle(IN id_film smallint unsigned)
		begin
			declare film_exists int;
			select count(*) into film_exists from film where film_id = id_film;

			if film_exists > 0 then
				update film set title = concat('New Title for id - ',id_film) where film_id = id_film;
				select 'Film Title is Updated' as Message;
				select title as 'New Title' from film where film_id = id_film;
			else
				select 'ERROR : Film ID Not Found !' as Message;
			end if;
		end //
	delimiter;

	-- To use the above procedure, call the procedure as follows:
	-- Example:

	CALL UpdateFilmTitle(enter_film_id_here);


04. Write a stored procedure named GetAvailableFilms that lists all films available for rent.

->  	delimiter //
		create procedure if not exists GetAvailableFilms()
		begin
			select film_id, title from film where film_id not in (select inventory.film_id from rental inner join inventory on rental.inventory_id = inventory.inventory_id);
		end //
	delimiter;

	-- To use the above procedure, call the procedure as follows:
	-- Example:

	CALL GetAvailableFilms();


05. Design a stored procedure named GetCustomerBalance that calculates and returns the total balance for a given customer ID.

->  	delimiter //
		create procedure if not exists GetCustomerBalance(IN id_customer smallint unsigned)
		begin
			select sum(amount) as 'Total Balance' from payment group by customer_id having customer_id = id_customer;
		end //
	delimiter; 

Intermediate Stored Procedure Questions:

01. Develop a stored procedure named RentFilm that takes customer ID and film ID as input parameters and handles the rental transaction.

-> 	delimiter //
		create procedure if not exists RentFilm(IN id_customer smallint unsigned, IN id_film smallint unsigned)
		begin
			declare checked int;
			declare id_store int;			
			declare id_inv int;
			declare id_staff int;

			select inventory.inventory_id into checked from inventory inner join rental on inventory.inventory_id = rental.inventory_id where inventory.film_id = id_film and rental.customer_id;
			
			if checked is null then

				select store.store_id into id_store from customer inner join store on customer.store_id = store.store_id where customer.customer_id = id_customer;

				insert into inventory(film_id,store_id,last_update)
				values(id_film,id_store,now());

				select inventory_id into id_inv from inventory where film_id = id_film;

				select staff_id into id_staff from staff where store_id = id_store;

				insert into rental(rental_date,inventory_id,customer_id,return_date,staff_id,last_update)
				values(now(),id_inv,id_customer,now() + interval 10 day,id_staff,now() + interval 2 day);

				if (select inventory.inventory_id from inventory inner join rental on inventory.inventory_id = rental.inventory_id where inventory.film_id = id_film) is not null then
					select 'New Rental Info Inserted Successfully' as Message;
				else
					select 'Some Problem in Insert Query' as Message;
				end if;
			else
				select concat('film of ',id_film,' already rented by customer ',id_customer) as Message;
			end if;
		end //
	delimiter;

	-- To use the above procedure, call the procedure as follows:
	-- Example:

	CALL RentFilm(enter_customer_id_here, enter_film_id_here);

-- 03. Write a stored procedure named CalculateLateFees that calculates and UPDATEs late fees for overdue rentals.

	-- there are zero entry of overdue rental so let first make some user which pay after return date

	UPDATE payment SET payment_date = DATE_ADD(payment_date, INTERVAL 5 MONTH) WHERE rental_id % 2 = 0;

	DELIMITER //

		CREATE PROCEDURE CalculateLateFees()
		BEGIN
			DECLARE is_done TINYINT UNSIGNED DEFAULT 0;
			DECLARE lf INT UNSIGNED;
			DECLARE bigDate DATE;
			DECLARE smallDate DATE;
			DECLARE id_rental INT UNSIGNED;
			DECLARE cal_diff CURSOR FOR SELECT rental.rental_id, payment.payment_date, rental.return_date FROM rental INNER JOIN payment ON rental.rental_id = payment.rental_id WHERE payment.payment_date > rental.return_date;

			DECLARE CONTINUE HANDLER FOR NOT FOUND SET is_done = 1;

			IF (SELECT COUNT(*) FROM rental INNER JOIN payment ON rental.rental_id = payment.rental_id WHERE payment.payment_date > rental.return_date) > 0 THEN 
		
				IF NOT EXISTS ( SELECT * FROM information_schema.columns WHERE table_name = 'rental' AND column_name = 'Late_Fee') THEN
		
					ALTER TABLE rental ADD COLUMN Late_Fee INT DEFAULT 0;
				END IF;

				OPEN cal_diff;

					my_loop: LOOP
		
						FETCH cal_diff INTO id_rental,bigDate,smallDate;

						IF is_done = 1 THEN -- No more rows

							LEAVE my_loop;
						END IF;

						SET lf = DATEDIFF(bigDate, smallDate) * 2;
						UPDATE rental SET Late_Fee = lf WHERE rental_id = id_rental;
					END LOOP;
				CLOSE cal_diff;

				SELECT "Data Updated Successfully" as Message;
			
			ELSE
			
				SELECT "There is Zero Overdue Users" as Message;
			END IF;

		END
	
	// DELIMITER;

	CALL CalculateLateFees();

-- 04. Design a stored procedure named GetFilmInventory that displays the current inventory status of a specIFic film.

	DELIMITER //
	
		CREATE PROCEDURE GetFilmInventory(IN Film_Name VARCHAR(100))
		BEGIN
			SELECT inventory.*,film.title FROM inventory INNER JOIN film ON inventory.film_id = film.film_id where film.title = Film_Name;
		END //
	DELIMITER ; 

	CALL GetFilmInventory(enter_film_name_here);

-- 05. Develop a stored procedure named GetCustomerHistory that provides a summary of a customer's rental history.

	DELIMITER //
	
		CREATE PROCEDURE GetCustomerHistory(IN Cust_Name varchar(20))
		BEGIN
			SELECT customer_list.name,rental.* FROM customer_list inner join rental on customer_list.ID = rental.customer_id where customer_list.name = Cust_Name;
		END //
	DELIMITER ;	 

	CALL GetCustomerHistory(enter_customer_full_name_here);
