1. Retrieve all columns from the "film" table.
2. Select the distinct values of the "rating" column from the "film" table.
3. Display the first 10 rows from the "actor" table.
4. List all films with a rating of 'PG-13' from the "film" table.
5. Count the number of films in the "film" table.
6. Show the titles of films released after the year 2005 from the "film" table.
7. Retrieve the names of customers who live in the city 'London' from the "customer" table.
8. Display the rental details for film ID 5 from the "rental" table.
9. List all films where the title contains the word 'love' from the "film" table.
10. Find the total number of actors in the "actor" table.
11. Retrieve the names of customers who have rented more than five films from the "customer" and "rental" tables.
12. List the films that were rented on or after '2023-01-01' from the "rental" table.
13. Display the average rental duration for each film from the "rental" table.
14. Find the top 10 customers who have paid the most in total for rentals from the "payment" table.
15. Show the films that have not been rented yet from the "film" and "rental" tables.
16. Create a stored procedure named GetFilmDetails that takes a film ID as input and returns details about that film.
17. Write a stored procedure named GetCustomerRentals that accepts a customer ID as a parameter and displays all rentals for that customer.
18. Create a stored procedure named UpdateFilmTitle that updates the title of a film based on the film ID provided as an input parameter.
19. Write a stored procedure named GetAvailableFilms that lists all films available for rent.
20. Design a stored procedure named GetCustomerBalance that calculates and returns the total balance for a given customer ID.
21. Develop a stored procedure named RentFilm that takes customer ID and film ID as input parameters and handles the rental transaction.
22. Write a stored procedure named CalculateLateFees that calculates and UPDATEs late fees for overdue rentals.
23. Design a stored procedure named GetFilmInventory that displays the current inventory status of a specIFic film.
24. Develop a stored procedure named GetCustomerHistory that provides a summary of a customer's rental history.
25. **Customer Segment Analysis:**
   Write a query to categorize customers into segments based on their total rental amount. Use the `CASE` statement to assign customers to segments such as "High Value," "Medium Value," and "Low Value" based on their rental spending.
26. **Film Inventory Status:**
   Develop a query to determine the status of film inventory based on the number of available copies. Use the `CASE` statement to categorize films as "Available," "Low Stock," or "Out of Stock" based on the quantity of available copies in the inventory.
27. **Late Return Penalty Calculation:**
   Create a query to calculate the late return penalty for each rental transaction. Use the `CASE` statement to determine if a rental is overdue and calculate the penalty based on the number of days overdue.
28. **Customer Renting Behavior Analysis:**
   Write a query to analyze the renting behavior of customers based on the genres of films they rent. Use the `CASE` statement to categorize customers into segments such as "Action Lovers," "Romantic Enthusiasts," "Comedy Fans," etc., based on the genres of films they rent most frequently.
29. **Film Rental Trends:**
   Develop a query to identify the trend of film rentals over time. Use the `CASE` statement to categorize rentals into time periods (e.g., "Morning," "Afternoon," "Evening," "Night") and analyze the distribution of rentals throughout the day.
30. **Customer Loyalty Program Eligibility:**
   Create a query to determine the eligibility of customers for a loyalty program based on their rental history. Use the `CASE` statement to evaluate criteria such as the number of rentals, total spending, and frequency of rentals to determine eligibility.
