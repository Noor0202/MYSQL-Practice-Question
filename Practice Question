### Easy Questions:

1. Retrieve all columns from the "film" table.
2. Select the distinct values of the "rating" column from the "film" table.
3. Display the first 10 rows from the "actor" table.
4. List all films with a rating of 'PG-13' from the "film" table.
5. Count the number of films in the "film" table.
6. Show the titles of films released after the year 2005 from the "film" table.
7. Retrieve the names of customers who live in the city 'London' from the "customer" table.
8. Display the rental details for film ID 5 from the "rental" table.
9. List all films where the title contains the word 'love' from the "film" table.
10. Find the total number of actors in the "actor" table.

### Middle Questions:

11. Retrieve the names of customers who have rented more than five films from the "customer" and "rental" tables.
12. List the films that were rented on or after '2023-01-01' from the "rental" table.
13. Display the average rental duration for each film from the "rental" table.
14. Find the top 10 customers who have paid the most in total for rentals from the "payment" table.
15. Show the films that have not been rented yet from the "film" and "rental" tables.

### Hard Questions:

16. Identify the customers who have rented all films in a specific category from the "customer," "rental," "inventory," and "film_category" tables.
17. Display the customers who have not rented any films in the last month from the "customer" and "rental" tables.
18. Calculate the total revenue generated by each film from the "rental" and "payment" tables.
19. Find the films with the highest average ratings from the "film" and "review" tables.
20. List the customers who have rented at least one film from each category from the "customer," "rental," and "film_category" tables.
21. Determine the most popular actors based on the number of films rented from the "actor," "film_actor," and "rental" tables.
22. Identify films that have similar plots based on common words in their descriptions from the "film" table.
23. Calculate the average number of rentals per customer from the "customer" and "rental" tables.
24. Display the films with the highest replacement cost in each rating category from the "film" table.
25. Find customers who have rented films in all the cities from the "customer" and "address" tables.
26. Identify the customers who have rented films in every category in a specific store from the "customer," "rental," "inventory," and "film_category" tables.
27. List the films that have been rented by the same customer consecutively from the "rental" table.
28. Find the actor who has appeared in the most films without being the main actor from the "actor" and "film_actor" tables.
29. Display the average rental duration for films with a rental rate above the overall average from the "film" and "rental" tables.
30. Identify customers who have rented all the films in a specific language from the "customer," "rental," "inventory," and "film" tables.
31. List the films that have the same title but different release years from the "film" table.
32. Find the actors who have appeared in films in at least three different languages from the "actor," "film_actor," and "film" tables.
33. Display the customer(s) who have rented the most films on weekdays from the "customer" and "rental" tables.
34. Calculate the total revenue generated by each customer from the "customer" and "payment" tables.
35. Identify the films with the longest gap between two consecutive rentals from the "rental" table.

Basic Stored Procedure Questions:

1. Create a stored procedure named GetFilmDetails that takes a film ID as input and returns details about that film.
2. Write a stored procedure named GetCustomerRentals that accepts a customer ID as a parameter and displays all rentals for that customer.
3. Create a stored procedure named UpdateFilmTitle that updates the title of a film based on the film ID provided as an input parameter.
4. Write a stored procedure named GetAvailableFilms that lists all films available for rent.
5. Design a stored procedure named GetCustomerBalance that calculates and returns the total balance for a given customer ID.

Intermediate Stored Procedure Questions:

1. Develop a stored procedure named RentFilm that takes customer ID and film ID as input parameters and handles the rental transaction.
2. Create a stored procedure named GetTopCustomers that returns a list of top customers based on the total amount they've spent on rentals.
3. Write a stored procedure named CalculateLateFees that calculates and updates late fees for overdue rentals.
4. Design a stored procedure named GetFilmInventory that displays the current inventory status of a specific film.
5. Develop a stored procedure named GetCustomerHistory that provides a summary of a customer's rental history.

Advanced Stored Procedure Questions:

1. Create a stored procedure named GenerateRentalReport that generates a report on rental transactions for a given time period.
2. Write a stored procedure named DeleteOldRentals that deletes rental records older than a specified date.
3. Develop a stored procedure named CalculateRevenueByCategory that calculates and displays the revenue for each film category.
4. Create a stored procedure named BulkRentFilms that accepts a list of film IDs and a customer ID, then processes multiple rentals in a single transaction.
5. Write a stored procedure named GenerateMonthlyBilling that calculates and generates billing information for all customers.
